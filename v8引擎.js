/**
 *编译型语言(只需编译一次)
 C++、Java
 

 * 解释性语言（源代码—>中间代码—>机器语言） 一遍执行一边解析
 Python、JavaScript、Shell、Ruby、MATLAB




 渲染引擎 - 能够能够将HTML/CSS/JavaScript文本及相应的资源文件转换成图像结果.
 源代码-→抽象语法树-→字节码-→JIT-→本地代码(V8引擎没有中间字节码)
 V8更加直接的将抽象语法树通过JIT技术转换成本地代码，放弃了在字节码阶段可以进行的一些性能优化，但保证了执行速度。

  渲染引擎的种类 - Tridend(IE)、Gecko(FF),WebKit


隐藏类 v8借用了类和偏移位置的思想，将本来通过属性名匹配来访问属性值的方法进行了改进，使用类似C++编译器的偏移位置机制来实现，这就是隐藏类。

内嵌缓存 - 大致思路就是将初次查找的隐藏类和偏移值保存起来，当下次查找的时候，先比较当前对象是否是之前的隐藏类，如果是的话，直接使用之前的缓存结果，减少再次查找表的时间。当然，如果一个对象有多个属性，那么缓存失误的概率就会提高，因为某个属性的类型变化之后，对象的隐藏类也会变化，就与之前的缓存不一致，需要重新使用以前的方式查找哈希表。

V8引擎是一个JavaScript引擎实现，最初由一些语言方面专家设计，后被谷歌收购，随后谷歌对其进行了开源。
V8使用C++开发，在运行JavaScript之前，相比其它的JavaScript的引擎转换成字节码或解释执行，V8将其编译成原生机器码（IA-32, x86-64, ARM, or MIPS CPUs），并且使用了如内联缓存（inline caching）等方法来提高性能。
有了这些功能，JavaScript程序在V8引擎下的运行速度媲美二进制程序。
V8支持众多操作系统，如windows、linux、android等，也支持其他硬件架构，如IA32,X64,ARM等，具有很好的可移植和跨平台特性。


由于V8缺少了生成中间代码这一环节，缺少了必要的优化，为了提升性能，V8会在生成本地代码后，使用数据分析器(profiler)采集一些信息，然后根据这些数据将本地代码进行优化，生成更高效的本地代码，这是一个逐步改进的过程。同时，当发现优化后代码的性能还不如未优化的代码，V8将退回原来的代码，也就是优化回滚。

类型。对于函数，JavaScript是一种动态类型语言，JavaScriptCore和V8都使用隐藏类和内嵌缓存来提高性能，为了保证缓存命中率，一个函数应该使用较少的数据类型；对于数组，应尽量存放相同类型的数据，这样就可以通过偏移位置来访问。

数据表示。简单类型数据（如整型）直接保存在句柄中，可以减少寻址时间和内存占用，如果可以使用整数表示的，尽量不要用浮点类型。

内存。虽然JavaScript语言会自己进行垃圾回收，但我们也应尽量做到及时回收不用的内存，对不再使用的对象设置为null或使用delete方法来删除(使用delete方法删除会触发隐藏类新建，需要更多的额外操作)。

优化回滚。在执行多次之后，不要出现修改对象类型的语句，尽量不要触发优化回滚，否则会大幅度降低代码的性能。

新机制。使用JavaScript引擎或者渲染引擎提供的新机制和新接口提高性能


垃圾回收机制

标记-清除法
变量在定义之后会打上标记，使用之后不需要保存的变量去掉标记
回收机制根据是否有标记决定是否回收该变量所占内存

引用计数
引用计数根据变量被引用的次数，决定是否回收，
如果被引用次数为0，则该回收了


有几种情况，不会自动回收变量
1.全局变量
2.闭包内引用的变量













 */


